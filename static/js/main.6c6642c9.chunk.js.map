{"version":3,"sources":["component/Menu/MenuRoutes.js","component/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["MenuRoutes","to","ten","Menu","showMenu","map","Menuroute","index","key","xoaChungThuc","localStorage","removeItem","className","this","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPA8CeA,EA9CG,CACd,CACIC,GAAK,IACLC,IAAM,kBAEV,CACID,GAAK,gBACLC,IAAM,QAEV,CACID,GAAK,eACLC,IAAM,cAEV,CACID,GAAK,SACLC,IAAM,SAEV,CACID,GAAK,aACLC,IAAM,aAEV,CACID,GAAK,YACLC,IAAM,YAEV,CACID,GAAK,cACLC,IAAM,cAEV,CACID,GAAK,MACLC,IAAM,MAEV,CACID,GAAK,OACLC,IAAM,OAEV,CACID,GAAK,QACLC,IAAM,QAEV,CACID,GAAK,YACLC,IAAM,UCRCC,E,2MA5BbC,SAAW,SAACJ,GASV,OAPSA,EAAWK,KAAI,SAACC,EAAWC,GAClC,OACE,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAMN,GAAIK,EAAUL,IAApB,IAA2BK,EAAUJ,U,EAM7CO,aAAe,WACbC,aAAaC,WAAW,e,wEAGxB,OACI,6BACI,yBAAKC,UAAU,8BACX,wBAAIA,UAAU,kBACXC,KAAKT,SAASJ,GACf,4BAAQc,QAASD,KAAKJ,cAAtB,sC,GArBCM,IAAMC,WCsBVC,E,iLATX,OACE,kBAAC,IAAD,KACI,kBAAC,EAAD,W,GAdQF,IAAMC,WCKJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c6642c9.chunk.js","sourcesContent":["const MenuRoutes =[\n    {\n        to : '/',\n        ten : 'Trang chủ',\n    },\n    {\n        to : '/product-list',\n        ten : 'QLSP',\n    },\n    {\n        to : '/product/add',\n        ten : 'Thêm SP',\n    },\n    {\n        to : '/todos',\n        ten : 'Todos',\n    }, \n    {\n        to : '/JWTSignup',\n        ten : 'JWTSignup',\n    },\n    {\n        to : '/JWTLogin',\n        ten : 'JWTLogin',\n    },\n    {\n        to : '/blockchain',\n        ten : 'Blockchain',\n    },\n    {\n        to : '/ai',\n        ten : 'AI',\n    },\n    {\n        to : '/iot',\n        ten : 'IoT',\n    },\n    {\n        to : '/attp',\n        ten : 'ATTP',\n    },\n    {\n        to : '/myacount',\n        ten : 'MyJWT',\n    },\n];\nexport default MenuRoutes;\n","import React from 'react';\nimport { Link} from 'react-router-dom';\nimport MenuRoutes from './MenuRoutes';\n\n\n\nclass Menu extends React.Component {\n  showMenu = (MenuRoutes)=>{\n    var result = null;\n    result = MenuRoutes.map((Menuroute, index)=>{\n      return (\n        <li key={index}>\n          <Link to={Menuroute.to} > {Menuroute.ten}</Link>\n        </li>\n      ); \n    });\n    return result;\n  }\n  xoaChungThuc = ()=>{\n    localStorage.removeItem('chung-thuc')\n  }\n  render(){\n    return (\n        <div>\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <ul className=\"nav navbar-nav\">\n                  {this.showMenu(MenuRoutes)}\n                  <button onClick={this.xoaChungThuc}>Xóa chứng thực</button>\n                </ul>\n              </nav>\n      </div>\n    );\n  }\n}\n\nexport default Menu;","import React from 'react';\nimport Menu from './component/Menu/Menu';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\n// import routes from './routes';\n\n\n\nclass App extends React.Component{\n  // showContentMenu = (routes)=>{\n  //   var result = null;\n  //   if(routes.length > 0){\n  //     result = routes.map((route, index)=>{\n  //       return( <Route key={index} path={route.path} exact={route.exact} component={route.main} />);\n  //     });\n  //   }\n  //   return <Switch>{result}</Switch>\n  // }\n\n  render(){ \n    return (\n      <Router>\n          <Menu />\n          {/* {this.showContentMenu(routes)} */}\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}